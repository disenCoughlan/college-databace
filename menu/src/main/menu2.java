/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

/**
 *
 * @author disen
 */
public class menu2 extends javax.swing.JFrame {

    /**
     * Creates new form menu2
     */
    public menu2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textEditorB = new javax.swing.JButton();
        cancelB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileM = new javax.swing.JMenu();
        newMi = new javax.swing.JMenuItem();
        openMi = new javax.swing.JMenuItem();
        saveMi = new javax.swing.JMenuItem();
        printMi = new javax.swing.JMenuItem();
        exitMi = new javax.swing.JMenuItem();
        editM = new javax.swing.JMenu();
        copyMi = new javax.swing.JMenuItem();
        cutMi = new javax.swing.JMenuItem();
        pasteMi = new javax.swing.JMenuItem();
        selectAllMi = new javax.swing.JMenuItem();
        viewM = new javax.swing.JMenu();
        normalMi = new javax.swing.JMenuItem();
        imagesMi = new javax.swing.JMenuItem();
        toolbarsM = new javax.swing.JMenu();
        standardCmi = new javax.swing.JCheckBoxMenuItem();
        formattingCmi = new javax.swing.JCheckBoxMenuItem();
        autoTextCmi = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textEditorB.setText("Text Editor");
        textEditorB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textEditorBActionPerformed(evt);
            }
        });

        cancelB.setText("Cancel");

        jEditorPane1.setVisible(false);
        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textEditorB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(textEditorB)
                .addGap(18, 18, 18)
                .addComponent(cancelB)
                .addContainerGap(181, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        fileM.setMnemonic('F');
        fileM.setText("File");

        newMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMi.setMnemonic('N');
        newMi.setText("New");
        fileM.add(newMi);

        openMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMi.setMnemonic('O');
        openMi.setText("Open");
        openMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMiActionPerformed(evt);
            }
        });
        fileM.add(openMi);

        saveMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMi.setMnemonic('S');
        saveMi.setText("Save");
        fileM.add(saveMi);

        printMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printMi.setMnemonic('P');
        printMi.setText("Print");
        printMi.setEnabled(false);
        printMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMiActionPerformed(evt);
            }
        });
        fileM.add(printMi);

        exitMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exitMi.setMnemonic('E');
        exitMi.setText("Exit");
        fileM.add(exitMi);

        jMenuBar1.add(fileM);

        editM.setMnemonic('E');
        editM.setText("Edit");

        copyMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMi.setMnemonic('C');
        copyMi.setText("Copy");
        copyMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMiActionPerformed(evt);
            }
        });
        editM.add(copyMi);

        cutMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMi.setText("Cut");
        editM.add(cutMi);

        pasteMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMi.setText("Paste");
        pasteMi.setEnabled(false);
        editM.add(pasteMi);

        selectAllMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAllMi.setMnemonic('A');
        selectAllMi.setVisible(false);
        selectAllMi.setText("Select All");
        selectAllMi.setEnabled(false);
        selectAllMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllMiActionPerformed(evt);
            }
        });
        editM.add(selectAllMi);

        jMenuBar1.add(editM);

        viewM.setMnemonic('i');
        viewM.setText("View");

        normalMi.setText("Normal");
        viewM.add(normalMi);

        imagesMi.setText("Images");
        viewM.add(imagesMi);

        toolbarsM.setText("Toolbars");

        standardCmi.setSelected(true);
        standardCmi.setText("Standard");
        toolbarsM.add(standardCmi);

        formattingCmi.setText("Formatting");
        toolbarsM.add(formattingCmi);

        autoTextCmi.setText("Auto Text");
        autoTextCmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoTextCmiActionPerformed(evt);
            }
        });
        toolbarsM.add(autoTextCmi);

        viewM.add(toolbarsM);

        jMenuBar1.add(viewM);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textEditorBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textEditorBActionPerformed
        jEditorPane1.setVisible(true);
        jEditorPane1.setEditable(true);
        jEditorPane1.setFocusable(true);
    }//GEN-LAST:event_textEditorBActionPerformed

    private void printMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printMiActionPerformed

    private void openMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openMiActionPerformed

    private void copyMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_copyMiActionPerformed

    private void selectAllMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllMiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectAllMiActionPerformed

    private void autoTextCmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoTextCmiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_autoTextCmiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem autoTextCmi;
    private javax.swing.JButton cancelB;
    private javax.swing.JMenuItem copyMi;
    private javax.swing.JMenuItem cutMi;
    private javax.swing.JMenu editM;
    private javax.swing.JMenuItem exitMi;
    private javax.swing.JMenu fileM;
    private javax.swing.JCheckBoxMenuItem formattingCmi;
    private javax.swing.JMenuItem imagesMi;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newMi;
    private javax.swing.JMenuItem normalMi;
    private javax.swing.JMenuItem openMi;
    private javax.swing.JMenuItem pasteMi;
    private javax.swing.JMenuItem printMi;
    private javax.swing.JMenuItem saveMi;
    private javax.swing.JMenuItem selectAllMi;
    private javax.swing.JCheckBoxMenuItem standardCmi;
    private javax.swing.JButton textEditorB;
    private javax.swing.JMenu toolbarsM;
    private javax.swing.JMenu viewM;
    // End of variables declaration//GEN-END:variables
}
